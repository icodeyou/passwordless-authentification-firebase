apply plugin: 'jacoco'

/**
 * Create a code coverage report generation task for every application variant
 */
project.afterEvaluate {

    android.applicationVariants.all { variant ->

        def buildType = variant.buildType.name
        def taskNameWithFlavor = variant.name
        def unitTestsTaskName = "test${taskNameWithFlavor.capitalize()}UnitTest"
        def uiTestsTaskName = "connected${taskNameWithFlavor.capitalize()}AndroidTest"

        // exclude build types with no test tasks (because it's a release type for example)
        if (!project.tasks.findByName(unitTestsTaskName) || !project.tasks.findByName(uiTestsTaskName)) {
            return
        }

        // Create coverage task ex: 'jacocoTestReport<FlavorBuildType>' depending on
        // 'testFlavorBuildTypeUnitTest - unit tests' & connectedFlavorBuildTypeAndroidTest - integration tests.
        task "jacocoTestReport${taskNameWithFlavor.capitalize()}"(type: JacocoReport, dependsOn: [
                unitTestsTaskName, uiTestsTaskName
        ]) {
            group = "Reporting"
            description = "Generate Jacoco coverage reports on the ${taskNameWithFlavor.capitalize()} build."

            classDirectories = fileTree(
                    dir: "${project.buildDir}/tmp/kotlin-classes/${taskNameWithFlavor}",
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/BuildConfig.class',
                               '**/Manifest.class',
                               '**/Manifest$*.class',
                               '**/*$InjectAdapter.class',
                               '**/*$ModuleAdapter.class',
                               '**/*$ViewInjector*.class',
                               '**/*_MembersInjector.class',
                               '**/Dagger*Component.class',
                               '**/Dagger*Component$Builder.class',
                               '**/*Module_*Factory.class',
                               '**/*$ViewInjector*.*',
                               '**/*$ViewBinder*.*',
                               '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                               '**/*$*$*.*', // Anonymous classes generated by kotlin
                               //add libraries
                               'android/**/*.*',
                               'io/**/*.*',
                               '**/com/bumptech/**/*.*',
                               //remove what we don't test
                               'androidTest/**/*.*',
                               'test/**/*.*'
                    ])

            def coverageSourceDirs = [
                    // add main src folder
                    "src/main/java",
                    // add build type src folder
                    "src/$buildType/java",
            ]
            // add every flavor src folder
            variant.productFlavors.each { flavor ->
                coverageSourceDirs.add("src/${flavor.name}/java")
            }

            additionalSourceDirs = files(coverageSourceDirs)
            sourceDirectories = files(coverageSourceDirs)
            executionData = fileTree(dir: project.projectDir, includes: ["**/*.exec", "**/*.ec"])

            reports {
                xml.enabled = true
                html.enabled = true
            }
        }
    }
}

//SonarQube configuration.

apply plugin: 'org.sonarqube'

def variantNameForSonarqube = "connectedStagingDebug" //TODO : change to connectedStagingRelease ?

sonarqube {

    // we can only send data for one variant to sonarqube
    // so we choose the closest variant to production
    androidVariant variantNameForSonarqube

    properties {
        /*property "sonar.projectName", "NAME OF PROJECT, ex : Hobeez"
        property "sonar.projectKey", "PROJECT KEY, ex : hobeez-android"
        property "sonar.host.url", "SONARQUBE LINK, ex : https://sonarqube.toulouse.appstud.com"
        property "sonar.login", "SONARQUBE LOGIN KEY, ex : b82e1ef523d2fb1c0de1cc7b434a3eb2bad71a4b"*/
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.exclusions', '**/*.js,**/*.css,**/*.html'
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"

        property 'sonar.java.binaries', 'build/tmp/kotlin-classes/' + variantNameForSonarqube
        property 'sonar.java.test.binaries', 'build/tmp/kotlin-classes/' + variantNameForSonarqube
        property 'sonar.junit.reportsPath', 'build/test-results/test' + variantNameForSonarqube.capitalize() + 'UnitTest'
        property 'sonar.jacoco.reportPaths', [fileTree(dir: project.projectDir, includes: ['**/*.exec'])]
        property 'sonar.jacoco.itReportPaths', [fileTree(dir: project.projectDir, includes: ['**/*.ec'])]
        property 'detekt.sonar.kotlin.config.path', 'tools/default-detekt-config.yml'
    }
}

task qualityReportToSonarqube(type: GradleBuild) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports on the $variantNameForSonarqube variant and send data to Sonarqube"
    tasks = ['clean', "jacocoTestReport${variantNameForSonarqube.capitalize()}".toString(), 'sonarqube']
}
